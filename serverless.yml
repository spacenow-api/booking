# NOTE: variables used on the template
custom:
  StageName: ${opt:stage, 'SANDPIT'}
  ServiceName: "api"
  TableName: "bookings"
  SubdomainName: "spacenow"
  FirstAttributeName: "listingId"
  SecondAttributeName: "bookingId"
  ReadTableThroughputs: 1
  WriteTableThroughputs: 1

# NOTE: update this with your service name
service: ${self:custom.SubdomainNamea}-${self:custom.TableName}-${self:custom.ServiceName}

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${self:custom.StageName}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.StageName}-${self:custom.TableName}
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughput: ${self:custom.ReadTableThroughputs}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${self:custom.StageName}
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}
  
  # These environment variables are made available to our functions
  # under process.env.
  # environment:
  #   tableName: ${self:custom.tableName}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ DynamoTable, Arn ]

functions:
  create:
    handler: core/create.main
    events:
      - http:
          path: bookings
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: core/get.main
    events:
      - http:
          path: bookings/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: core/list.main
    events:
      - http:
          path: bookings
          method: get
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  GatewayResponseDefault4XX:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      ResponseParameters:
         gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
         gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId:
        Ref: 'ApiGatewayRestApi'
  GatewayResponseDefault5XX:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      ResponseParameters:
         gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
         gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_5XX
      RestApiId:
        Ref: 'ApiGatewayRestApi'
  # DynamoDB
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:custom.StageName}-${self:custom.TableName}
      AttributeDefinitions:
        - AttributeName: ${self:custom.FirstAttributeName}
          AttributeType: S
        - AttributeName: ${self:custom.SecondAttributeName}
          AttributeType: S
      KeySchema:
        - AttributeName: ${self:custom.FirstAttributeName}
          KeyType: HASH
        - AttributeName: ${self:custom.SecondAttributeName}
          KeyType: RANGE
      # Set the capacity based on the stage
      ProvisionedThroughput:
        ReadCapacityUnits: ${self:custom.ReadTableThroughputs}
        WriteCapacityUnits: ${self:custom.WriteTableThroughputs}