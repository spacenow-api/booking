# NOTE: update this with your service name
service: ${self:custom.SubdomainName}-${self:custom.ServiceName}-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  ServiceName: "bookings"
  StageName: ${opt:stage, 'sandpit'}
  SubdomainName: "spacenow"
  FirstAttributeName: "bookingId"
  # Set the table name here so we can use it while testing locally
  TableName: ${self:custom.StageName}-${self:custom.ServiceName}
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  TableThroughputs:
    non-prod: 3
    prod: 5
    default: 1
  TableThroughput: ${self:custom.TableThroughputs.${self:custom.StageName}, self:custom.TableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  domains:
    default: api.${self:custom.ServiceName}.${self:custom.StageName}.cloud.spacenow.com
    prod: api.${self:custom.ServiceName}.spacenow.com

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${self:custom.StageName}
  region: ${opt:region, 'ap-southeast-2'}
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}
  
  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.TableName}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ DynamoTable, Arn ]

functions:
  create:
    handler: core/create.main
    events:
      - http:
          path: bookings
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: core/get.main
    events:
      - http:
          path: bookings/{id}
          method: get
          cors: true
          authorizer: aws_iam
  getByHostId:
    handler: core/getByHostId.main
    events:
      - http:
          path: bookings/byHostId/{id}
          method: get
          cors: true
          authorizer: aws_iam
  getByGuestId:
    handler: core/getByGuestId.main
    events:
      - http:
          path: bookings/byGuestId/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: core/list.main
    events:
      - http:
          path: bookings
          method: get
          cors: true
          authorizer: aws_iam
  approve:
    handler: core/approve.main
    events:
      - http:
          path: bookings/approve/{id}
          method: put
          cors: true
          authorizer: aws_iam
  cancel:
    handler: core/cancel.main
    events:
      - http:
          path: bookings/cancel/{id}
          method: put
          cors: true
          authorizer: aws_iam
  complete:
    handler: core/complete.main
    events:
      - http:
          path: bookings/complete/{id}
          method: put
          cors: true
          authorizer: aws_iam
  decline:
    handler: core/decline.main
    events:
      - http:
          path: bookings/decline/{id}
          method: put
          cors: true
          authorizer: aws_iam
  expire:
    handler: core/expire.main
    events:
      - http:
          path: bookings/expire/{id}
          method: put
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}