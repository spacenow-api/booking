# NOTE: update this with your service name
service: ${self:custom.SubdomainName}-${self:custom.ServiceName}-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-domain-manager
  - serverless-dynamodb-local
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  ServiceName: 'bookings'
  StageName: ${opt:stage, 'dev'}
  StageNameCert: ${opt:stageCert, ''}
  SubdomainName: 'spacenow'
  FirstAttributeName: 'bookingId'
  # Set the table name here so we can use it while testing locally
  TableName: ${self:custom.StageName}-${self:custom.ServiceName}
  PreReservationTableName: ${self:custom.StageName}-${self:custom.ServiceName}-pre-reservation
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  TableThroughputs:
    nonprod: 2
    prod: 3
    default: 1
  TableThroughput: ${self:custom.TableThroughputs.${self:custom.StageName}, self:custom.TableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  domains:
    default: api-${self:custom.ServiceName}.${self:custom.StageName}.cloud.spacenow.com
    prod: api-${self:custom.ServiceName}.spacenow.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.StageName}, self:custom.domains.default}
    basePath: ''
    stage: ${self:custom.StageName}
    certificateArn: ${ssm:/${self:custom.StageNameCert, ''}/ACM_CERTIFICATE, ''}
    # certificateArn: arn:aws:acm:ap-southeast-2:159220020591:certificate/ec3b5931-c71d-4ddd-8157-d59964d168f2
    createRoute53Record: true
    endpointType: 'regional'
  dynamodb:
    stages:
      - ${self:custom.StageName}

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${self:custom.StageName}
  region: ${opt:region, 'ap-southeast-2'}
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.TableName}
    preReservationTableName: ${self:custom.PreReservationTableName}
    accountId: ${opt:accountId, ''}
    region: ${opt:region, 'ap-southeast-2'}
    queueName: ${self:custom.SubdomainName}-${self:custom.TableName}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::GetAtt': [DynamoTable, Arn]
        - 'Fn::GetAtt': [DynamoTablePreReservation, Arn]
    - Effect: 'Allow'
      Action:
        - 'sqs:SendMessage'
        - 'sqs:GetQueueUrl'
      Resource: "arn:aws:sqs:${opt:region, 'ap-southeast-2'}:${opt:accountId, ''}:${self:custom.SubdomainName}-${self:custom.TableName}"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"

functions:
  create:
    handler: core/create.main
    events:
      - http:
          path: bookings
          method: post
          cors: true
          # authorizer: aws_iam
  update:
    handler: core/update.main
    events:
      - http:
          path: bookings/{id}
          method: put
          cors: true
          # authorizer: aws_iam
  get:
    handler: core/get.main
    events:
      - http:
          path: bookings/{id}
          method: get
          cors: true
          # authorizer: aws_iam
  getByHostId:
    handler: core/getByHostId.main
    events:
      - http:
          path: bookings/byHostId/{id}
          method: get
          cors: true
          # authorizer: aws_iam
  getByGuestId:
    handler: core/getByGuestId.main
    events:
      - http:
          path: bookings/byGuestId/{id}
          method: get
          cors: true
          # authorizer: aws_iam
  list:
    handler: core/list.main
    events:
      - http:
          path: bookings
          method: get
          cors: true
          # authorizer: aws_iam
  approve:
    handler: core/approve.main
    events:
      - http:
          path: bookings/approve/{id}
          method: put
          cors: true
          # authorizer: aws_iam
  request:
    handler: core/request.main
    events:
      - http:
          path: bookings/request/{id}
          method: put
          cors: true
          # authorizer: aws_iam
  cancel:
    handler: core/cancel.main
    events:
      - http:
          path: bookings/cancel/{id}
          method: put
          cors: true
          # authorizer: aws_iam
  complete:
    handler: core/complete.main
    events:
      - http:
          path: bookings/complete/{id}
          method: put
          cors: true
          # authorizer: aws_iam
  decline:
    handler: core/decline.main
    events:
      - http:
          path: bookings/decline/{id}
          method: put
          cors: true
          # authorizer: aws_iam
  expire:
    handler: core/expire.main
    events:
      - http:
          path: bookings/expire/{id}
          method: put
          cors: true
          # authorizer: aws_iam
  getByCompleted:
    handler: core/getByCompleted.main
    events:
      - http:
          path: bookings/getByCompleted
          method: get
          cors: true
          # authorizer: aws_iam
  getByExpired:
    handler: core/getByExpired.main
    events:
      - http:
          path: bookings/getByExpired
          method: get
          cors: true
          # authorizer: aws_iam
  fetchAllPreReservations:
    handler: core/preReservation.fetchAllPreReservations
    events:
      - http:
          path: bookings/preReservations
          method: get
          cors: true
          # authorizer: aws_iam
  getPreReservationsByBookingId:
    handler: core/preReservation.getPreReservationsByBookingId
    events:
      - http:
          path: bookings/preReservation/{id}
          method: get
          cors: true
          # authorizer: aws_iam
  cleanAvailabilities:
    handler: core/cleanAvailabilities.main
    events:
      - http:
          path: bookings/cleanAvailabilities
          method: post
          cors: true
          # authorizer: aws_iam
  cleanListingAvailabilities:
    handler: core/cleanListingAvailabilities.main
    events:
      - http:
          path: bookings/cleanListingAvailabilities
          method: post
          cors: true
          # authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/dynamodb-pre-reservation-table.yml)}
